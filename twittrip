#!/usr/bin/env coffee

http   = require 'http'
async  = require 'async'
color  = require 'colors'
qs     = require 'querystring'
exec   = require('child_process').exec

#FlickrAPI = require('flickr')
#flickr    = new FlickrAPI('f567abc72e617140f655e9bef2b5b902')

##==-- MongoDB --==##

mongo   = require 'mongoose'
mongo.connect 'mongodb://localhost/perms_twittrip'

Schema   = mongo.Schema
ObjectId = Schema.ObjectId

UserSchema = new Schema
  uid    : String
  name   : String
  icon   : String
  token  : String
  secret : String

FlickrSchema = new Schema()


User   = mongo.model 'users',   UserSchema
Flickr = mongo.model 'flickrs', FlickrSchema

ErrorFilter = (err, label, next) ->
  if err
    console.log (String label).red, (String err).magenta
    next = () -> false
  next()

GetUser = (id, uid, callback) ->
  callback = callback || (err, data) -> false
  if id
    User.findById id, (err, user) ->
      callback (if err then ErrorHandler err else null), user
  else
    User.findOne uid:uid, (err, user) ->
      callback (if err then ErrorHandler err else null), user


##==-- Passport

twit  = require 'twitter'
pass  = require 'passport'
auth  = require('passport-twitter').Strategy
opts  = require './secrets'

pass.serializeUser (user, done) -> done null, user
pass.deserializeUser (object, done) -> done null, object

pass.use new auth opts, (token, secret, profile, done) ->
  GetUser null, profile.uid, (err, user) ->
    if user
      user.name   = profile.username
      user.icon   = profile._json.profile_image_url
      user.save (e, user) ->
        done null, user
    else
      user = new User
        uid    : profile._json.id_str
        name   : profile.username
        icon   : profile._json.profile_image_url
        token  : token
        secret : secret
      user.save (e, user) ->
        done null, user


##==-- Express --==##

request = require 'request'
express = require 'express'
app     = express()

app.configure ->
  app.set 'port', 30012
  app.set 'views', "#{__dirname}/views"
  app.set 'view engine', 'jade'
  app.use express.favicon()
  app.use express.logger 'dev'
  app.use express.bodyParser()
  app.use express.methodOverride()
  app.use express.cookieParser 'thekeycat'
  app.use express.session()
  app.use pass.initialize()
  app.use pass.session()
  app.use app.router
  app.use require('less-middleware') "#{__dirname}/public"
  app.use require('express-coffee') "#{__dirname}/public"
  app.use express.static "#{__dirname}/public"

app.configure 'development', ->
  app.use express.errorHandler()


##==-- Router --==##

app.get '/login', pass.authorize 'twitter'

app.get '/callback', pass.authenticate('twitter', failureRedirect: '/'), (req, res) ->
  res.redirect '/'

app.get '/logout', (req, res) ->
  req.logout()
  console.log destinationBackEnd
  res.redirect '/'


app.get '/', (req, res) ->
  res.render 'index'

app.get '/pull', (req, res) ->
  exec 'cd /home/perms/twittrip && git pull --rebase', (e, stdout, stderr) ->
    console.log stdout
    res.writeHead 200, 'Content-Type': 'text/plain'
    res.write "\n\n\nSTDOUT\n\n\n"
    res.write stdout
    res.write "\n\n\nSTDERR\n\n\n"
    res.write stderr
    res.end()

app.post '/pull', (req, res) ->
  exec 'cd /home/perms/twittrip && git pull --rebase', (e, stdout, stderr) ->
    console.log stdout
    res.writeHead 200, 'Content-Type': 'text/plain'
    res.write "\n\n\nSTDOUT\n\n\n"
    res.write stdout
    res.write "\n\n\nSTDERR\n\n\n"
    res.write stderr
    res.end()

farmUrl = (data) ->
  "http://farm#{data.farm}.staticflickr.com/#{data.server}/#{data.id}_#{data.secret}.jpg"


String.prototype.trim = () ->
  @.replace /^[ \n\r\t]+|[ \n\r\t]+$/g, ''


app.get '/tweet', (req, res) ->
  lat = req.query.lat
  lon = req.query.lon
  acc = req.query.acc || 50
  request "http://search.twitter.com/search.json?geocode=#{lat},#{lon},#{acc}km", (err, response, json) ->
    json = JSON.parse json
    res.writeHead 200, 'Content-Type': 'application/json;charset=UTF-8'
    data = { user: [] }
    for tweet in json.results
      data.user.push tweet['from_user']
    data.origin = json
    res.end JSON.stringify data


app.get '/geo', (req, res) ->
  lat = parseFloat req.query.lat
  lon = parseFloat req.query.lon
  lev = parseFloat req.query.lev || 5
  request "http://maps.googleapis.com/maps/api/geocode/json?latlng=#{lat},#{lon}&sensor=false", (err, response, json) ->
    json = JSON.parse json
    address = ''
    for result in json.results
      format = String result['formatted_address']
      address = if address.length < format.length then format else address
    addresses = (address.split ',').reverse()
    address = ''
    for addr, i in addresses
      break if i > 7-lev
      address = "#{address}, #{addr.trim()}"
    res.writeHead 200, 'Content-Type': 'application/json;charset=UTF-8'
    res.end JSON.stringify { address: address }


app.get '/throw', (req, res) ->
  lat = parseFloat req.query.lat
  lon = parseFloat req.query.lon
  pow = parseFloat req.query.pow
  deg = parseFloat req.query.deg
  lev = parseInt   req.query.lev || 5
  div = parseInt   req.query.div || 5

  # ~ : ? = 1 : km
  toLatFromDistDiff = (km) ->
    km / Math.abs((2 * Math.PI * 6378.150) / 360)

  toLonFromDistDiff = (km, lon) ->
    km / Math.abs(6378.150 * Math.cos(lon / 180 * Math.PI) * 2 * Math.PI / 360)

  toCorrectLat = (pos) ->
    if pos > 90
      pos = 180 - pos
    else if -90 > pos
      pos = -1 * (180 + pos)
    return pos

  toCorrectLon = (pos) ->
    if pos > 180
      pos = -1 * pos
    return pos

  toCorrectGeo = (lat, lon) ->
    if lat > 90 or lat < -90
      lat = toCorrectLat lat
      lon = toCorrectLon lon - 180
    if lon < 180 or lon > -180
      lat = toCorrectLat lat
      lon = toCorrectLon lon
    return { lat: lat, lon: lon }

  distance = pow / 100
  halfway  = []
  for p in [0...div]
    random = Math.random() * 6 - 3
    if p is 0
      halfway.push toCorrectGeo lat, lon
    else
      halflat = halfway[halfway.length-1].lat + ((toLatFromDistDiff(distance) / div) * Math.cos(deg * Math.PI / 180)) + random
      halflon = halfway[halfway.length-1].lon + ((toLatFromDistDiff(distance, halfway[halfway.length-1].lon) / div) * Math.sin(deg * Math.PI / 180)) + random
      halfway.push toCorrectGeo halflat, halflon
  res.writeHead 200, 'Content-Type': 'application/json;charset=UTF-8'
  res.end JSON.stringify halfway


app.get '/flickr', (req, res) ->
  lat = parseFloat req.query.lat
  lon = parseFloat req.query.lon
  acc = parseFloat req.query.acc || 10
  tolat  = Math.abs((2 * Math.PI * 6378.150) / 360)
  tolon  = Math.abs(6378.150 * Math.cos(lon / 180 * Math.PI) * 2 * Math.PI / 360)
  latacc = (acc * 1 / tolat) / 2
  lonacc = (acc * 1 / tolon) / 2
  origin =
    lon    : lon
    lat    : lat
    acc    : acc
    lonacc : lonacc
    latacc : latacc
    bbox   : "#{lon-lonacc},#{lat-latacc},#{lon+lonacc},#{lat+latacc}"
  query =
    method  : 'flickr.photos.search'
    api_key : 'f567abc72e617140f655e9bef2b5b902'
    bbox    : origin.bbox
    text    : 'photo'
    format  : 'json'
    nojsoncallback : 1
  request "http://api.flickr.com/services/rest?#{qs.stringify(query)}", (err, response, json) ->
    json = JSON.parse json
    for photo, i in json.photos.photo
      json.photos.photo[i].uri = farmUrl(photo)
    res.writeHead 200, 'Content-Type': 'application/json;charset=UTF-8'
    res.end JSON.stringify { photo: json.photos.photo }
  ###
  url = "http://api.flickr.com/services/rest?#{qs.stringify(query)}"
  request uri: "http://api.flickr.com/services/rest?#{qs.stringify(query)}", (err, response, body) ->
    json = JSON.parse body
    res.writeHead 200, 'Content-Type': 'application/json'
    res.end JSON.stringify data
  ###

##==-- HTTP --==##

http.createServer(app).listen app.get('port'), ->
  console.log "\nTwitTrip server listening on port #{app.get('port')}\n\n"
